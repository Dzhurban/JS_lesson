/*// Спосіб 1: 

function drawTriangle(height, symbol) {
                                                                     //height - це параметр, який очікує отримати числове значення і  визначає висоту 
                                                                    //symbol - це рядковий параметр, є символом, який буде  відображатися
    for (let i = 1; i <= height; i++) {                             // Зовнішній цикл проходить по рядках від 1 до висоти трикутника


        let row = '';                                                // Ініціалізуємо порожній рядок для поточного рядка трикутника
                                                               
        for (let j = 1; j <= i; j++) {                               // Внутрішній цикл додає символи до поточного рядка від 1 до номеру рядка
            row += symbol;                                 // Додаємо символ до поточного рядка
        }
        console.log(row);                                 // Виводимо поточний рядок трикутника в консоль
    }
}

                           // Викликаємо функцію з висотою 5-... і символом '*-/++_)(*?:%;№"!'.
drawTriangle(5, '*');*/



 //Спосіб 2: 
/*function drawTriangleRecursive(height, symbol, row = 1) {
                                                            // Базовий випадок: якщо поточний рядок більший за висоту, завершуємо рекурсію
    if (row > height) return;
    
    let line = '';                                        // Ініціалізуємо порожній рядок для поточного рядка трикутника
                                                            // Додаємо символи до поточного рядка від 1 до номеру рядка
    for (let i = 1; i <= row; i++) {
        line += symbol;                                   // Додаємо символ до поточного рядка
    }
    console.log(line);                                 // Виводимо поточний рядок трикутника в консоль
    
                                                   // Рекурсивно викликаємо функцію для наступного рядка
    drawTriangleRecursive(height, symbol, row + 1);
}

                                                       // Викликаємо рекурсивну функцію з висотою 5-.. і символом '*!@#$%^&*..'
drawTriangleRecursive(5, '*');*/




   //Спосіб 3:  
                                            // Оголошуємо функцію drawTriangle, яка приймає параметри height (висота) та symbol (символ)
function drawTriangle(height, symbol) {
                                             // Ініціалізуємо лічильник зовнішнього циклу на 1, щоб почати від першого рядка
    let i = 1;
                                            // Починаємо виконувати блок коду циклу while, поки лічильник не перевищить висоту трикутника
    while (i <= height) {
                                          // Ініціалізуємо порожній рядок для зберігання символів на кожному рядку
        let row = '';
                                              // Ініціалізуємо лічильник внутрішнього циклу на 1, щоб почати додавати символи до рядка з першого символу
        let j = 1;
                                                // Починаємо виконувати блок коду внутрішнього циклу while, поки лічильник не перевищить поточне значення зовнішнього циклу
        while (j <= i) {
                                           // Додаємо символ до рядка
            row += symbol;
                                               // Збільшуємо лічильник внутрішнього циклу
            j++;
        }
                                              // Виводимо поточний рядок трикутника у консоль
        console.log(row);
                                     // Збільшуємо лічильник зовнішнього циклу для переходу до наступного рядка
        i++;
    }
}

                                   // Викликаємо функцію drawTriangle з висотою 5-... та символом '*?:%;№*'.
drawTriangle(5, '*');



